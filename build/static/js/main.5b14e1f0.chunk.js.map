{"version":3,"sources":["store/reducers.js","store/index.js","store/actions.js","store/thunk.js","utils/styles.js","utils/index.js","components/EmailInput/EmailInput.js","components/PasswordInput/PasswordInput.js","components/ErrorPopup/ErrorPopup.js","components/LoginModal/LoginModal.js","pages/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["initialState","isLoggedIn","email","password","loginErrorMessage","rootReducer","combineReducers","app","state","arguments","length","undefined","action","type","Object","objectSpread","loginRequest","Promise","resolve","reject","setTimeout","randomResponse","Math","random","console","log","Error","ValidityText","styled","div","_templateObject","props","valid","EMAIL_VALIDATION_REGEX","INCREASING_STRAIGHT_REGEX","FORBIDDEN_CHARACTERS_REGEX","NON_OVERLAPPING_PAIRS_REGEX","LOWER_CASE_CHARS_REXEX","isValidEmail","test","ruleIncreasingStraight","ruleShouldNotContainLetters","ruleContainNonOverlappingPairs","match","validLength","onlyLowerCaseChars","EmailInput","_ref","onChange","validEmail","react_default","a","createElement","Fragment","Input","e","placeholder","name","value","input","EmailInput_templateObject","PasswordInput","PasswordInput_Input","PasswordInput_templateObject","ErrorPopup","message","PopupDiv","ErrorPopup_templateObject","LoginModal","_useSelector","useSelector","dispatch","useDispatch","isFormValid","components_ErrorPopup_ErrorPopup","Modal","LoginForm","Title","components_EmailInput_EmailInput","target","components_PasswordInput_PasswordInput","SubmitButton","onClick","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","then","res","response","catch","err","error","stop","_x","apply","this","loginThunk","disabled","LoginModal_templateObject","_templateObject2","_templateObject3","button","_templateObject4","HomeContainer","Home_templateObject","LogoutButton","Home_templateObject2","Header","Home_templateObject3","Home","store","middlewares","thunkMiddleware","createStore","applyMiddleware","configureStore","App","className","es","components_LoginModal_LoginModal","pages_Home_Home","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b14e1f0.chunk.js","sourcesContent":["import {\n    ACTION_SEND_LOGIN_REQUEST,\n    ACTION_LOGIN_RESPONSE_RECEIVED,\n    ACTION_LOGIN_RESPONSE_ERROR,\n    ACTION_LOGOUT,\n    ACTION_UPDATE_EMAIL,\n    ACTION_UPDATE_PASSWORD\n} from './actions';\n\nexport const initialState = {\n    isLoggedIn: false,\n    email: '',\n    password: '',\n    loginErrorMessage: ''\n}\n\nexport const reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case ACTION_SEND_LOGIN_REQUEST: \n            return {\n                ...state,\n                loginErrorMessage : ''\n            };\n        case ACTION_LOGIN_RESPONSE_RECEIVED: \n            return {\n                ...state,\n                isLoggedIn: true\n            };    \n        case ACTION_LOGIN_RESPONSE_ERROR: \n            return {\n                ...state,\n                loginErrorMessage : `\n                Mock Error: This error just shows how failed \n                authentication requests are displayed. The response \n                is random, please try logging in one again.\n                `\n            };    \n        case ACTION_UPDATE_EMAIL: \n            return {\n                ...state,\n                email: action.email,\n                loginErrorMessage : ''\n            }    \n        case ACTION_UPDATE_PASSWORD: \n            return {\n                ...state,\n                password: action.password,\n                loginErrorMessage : ''\n            }   \n        case ACTION_LOGOUT: \n            return {\n                isLoggedIn: false,\n                email: '',\n                password: '',\n                loginErrorMessage : ''\n            }        \n        default: \n            return state;    \n    }    \n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { reducer } from './reducers';\n\nconst rootReducer = combineReducers({\n  app: reducer,\n});\n\nexport default function configureStore() {\n  const middlewares = [thunkMiddleware];\n  const store = createStore(rootReducer, applyMiddleware(...middlewares));\n  return store;\n}\n","export const ACTION_SEND_LOGIN_REQUEST = 'ACTION_SEND_LOGIN_REQUEST';\nexport const ACTION_LOGIN_RESPONSE_RECEIVED = 'ACTION_LOGIN_RESPONSE_RECEIVED';\nexport const ACTION_LOGIN_RESPONSE_ERROR = 'ACTION_LOGIN_RESPONSE_ERROR';\nexport const ACTION_UPDATE_EMAIL = 'ACTION_UPDATE_EMAIL';\nexport const ACTION_UPDATE_PASSWORD = 'ACTION_UPDATE_PASSWORD';\nexport const ACTION_LOGOUT = 'ACTION_LOGOUT';\n\nexport const sendLoginRequest = () => ({\n    type: ACTION_SEND_LOGIN_REQUEST\n});\n\nexport const loginResponseRecieved = (response) => ({\n    type: ACTION_LOGIN_RESPONSE_RECEIVED,\n    response\n});\n\nexport const loginErrorInResponseRecieved = (error) => ({\n    type: ACTION_LOGIN_RESPONSE_ERROR,\n    error\n});\n\nexport const updateEmail = (email) => ({\n    type: ACTION_UPDATE_EMAIL,\n    email\n})\n\nexport const updatePassword = password => ({\n    type: ACTION_UPDATE_PASSWORD,\n    password\n})\n\nexport const logout = () => ({\n    type: ACTION_LOGOUT\n})","import {\n    sendLoginRequest,\n    loginResponseRecieved,\n    loginErrorInResponseRecieved\n} from './actions';\n\nexport const loginThunk = () => async dispatch => {\n    dispatch(sendLoginRequest());\n    loginRequest()\n        .then(res => {\n            dispatch(loginResponseRecieved(res))\n        })\n        .catch(err => dispatch(loginErrorInResponseRecieved(err)));\n};\n\nconst loginRequest = () =>\n    (new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const randomResponse = Math.random() > 0.5;\n            console.log('random login response is: ', randomResponse);\n            randomResponse ? resolve({}) : reject(new Error('Login failed'))    \n        }, 500);\n    }))","import styled from 'styled-components';\n\nexport const ValidityText = styled.div`\n    color: ${ props => props.valid ? '#009900' : '#FF0000' }\n    margin-top: 5px;\n    font-size: 11px;\n    display:list-item;\n    margin-left: 20px;\n`;","// ideally the regex is supposed to be complex but I am using \n// a simple regex for the demo\nconst EMAIL_VALIDATION_REGEX = /(.+)@(.+){2,}\\.(.+){2,}/;\nconst INCREASING_STRAIGHT_REGEX = /abc|bcd|cde|def|efg|fgh|ghi|hij|ijk|jkl|klm|lmn|mno|nop|opq|pqr|qrs|rst|stu|tuv|uvw|vwx|wxy|xyz/;\nconst FORBIDDEN_CHARACTERS_REGEX = /i|O|l/;\nconst NON_OVERLAPPING_PAIRS_REGEX = /aa|bb|cc|dd|ee|ff|gg|hh|ii|jj|kk|ll|mm|nn|oo|pp|qq|rr|ss|tt|uu|vv|ww|xx|yy|zz/g;\nconst LOWER_CASE_CHARS_REXEX = /^[a-z]+$/;\nconst MAX_PASSWORD_LENGTH = 32;\n\nexport const isValidEmail = email => EMAIL_VALIDATION_REGEX.test(email)\nexport const ruleIncreasingStraight = password => INCREASING_STRAIGHT_REGEX.test(password)\nexport const ruleShouldNotContainLetters = password => !!password && (!FORBIDDEN_CHARACTERS_REGEX.test(password))\nexport const ruleContainNonOverlappingPairs = password => \n    (password.match(NON_OVERLAPPING_PAIRS_REGEX) || []).length >= 2;\nexport const validLength = password => !!password && password.length <= MAX_PASSWORD_LENGTH\nexport const onlyLowerCaseChars = password => LOWER_CASE_CHARS_REXEX.test(password)","import React from 'react';\nimport styled from 'styled-components';\nimport {ValidityText} from './../../utils/styles';\nimport {isValidEmail} from './../../utils';\n\nconst EmailInput = ({ email, onChange }) => {\n    const validEmail = isValidEmail(email);\n    return (<>\n        <Input \n        onChange={(e) => onChange(e)} \n        type=\"text\" \n        placeholder=\"Email\"\n        name=\"email\" \n        value={email}\n    />\n    <ValidityText valid={validEmail}>\n        { validEmail ? 'Email is valid': 'Email should be valid' }\n    </ValidityText>\n    </>)\n} \n\nexport default EmailInput;\n\n\nconst Input = styled.input`\n    background:#ecf0f1;\n    border: #ccc 1px solid;\n    border-bottom: #ccc 2px solid;\n    padding: 8px;\n    width:250px;\n    color:#AAAAAA;\n    margin-top:10px;\n    font-size:1em;\n    border-radius:4px;\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport {ValidityText} from './../../utils/styles';\nimport {\n    ruleIncreasingStraight, \n    ruleShouldNotContainLetters, \n    ruleContainNonOverlappingPairs, \n    validLength, \n    onlyLowerCaseChars\n} from './../../utils';\n\nconst PasswordInput = ({ password, onChange }) => {\n    return (<>\n        <Input \n            onChange={(e) => onChange(e)}\n            type=\"password\" \n            placeholder=\"Password\" \n            name=\"email\" \n            value={password}\n        />\n        <ValidityText valid={ruleIncreasingStraight(password)}>\n            Passwords must include one increasing straight of at least three letters, like abc , cde , fgh , and so on, up to xyz . They cannot skip letters; acd doesn't count.\n        </ValidityText>\n        <ValidityText valid={ruleShouldNotContainLetters(password)}>\n            Passwords may not contain the letters i, O, or l, as these letters can be mistaken for other characters and are therefore confusing.\n        </ValidityText>\n        <ValidityText valid={ruleContainNonOverlappingPairs(password)}>\n            Passwords must contain at least two non-overlapping pairs of letters, like aa, bb, or cc.\n        </ValidityText>\n        <ValidityText valid={validLength(password)}>\n            Passwords cannot be longer than 32 characters.\n        </ValidityText>\n        <ValidityText valid={onlyLowerCaseChars(password)}>\n            Passwords can only contain lower case alphabetic characters.\n        </ValidityText>\n    </>)\n} \n\nexport default PasswordInput;\n\nconst Input = styled.input`\n    border-radius:4px;\n    background:#ecf0f1;\n    border: #ccc 1px solid;\n    padding: 8px;\n    width:250px;\n    font-size:1em;\n    margin-top:10px;\n`;","import React from 'react';\nimport styled from 'styled-components';\n\nconst ErrorPopup = ({message}) => {\n    return (<PopupDiv>{message}</PopupDiv>)\n}\n\nexport default ErrorPopup;\n\nconst PopupDiv = styled.div`\n    position: fixed;\n    margin: 10px 50%;\n    padding: 12px 40px;\n    border: 2px solid #721c24;\n    border-radius: .25rem;\n    color: #721c24;\n    background-color: #f8d7da;\n    border-color: #721c24;\n    z-index: 1;\n    transform: translate(-50%, 0);\n    width: 400px;\n    text-align: center;\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {loginThunk} from './../../store/thunk';\nimport {updateEmail, updatePassword} from './../../store/actions';\nimport EmailInput from '../EmailInput/EmailInput';\nimport PasswordInput from './../PasswordInput';\nimport {\n    isValidEmail,\n    ruleIncreasingStraight, \n    ruleShouldNotContainLetters, \n    ruleContainNonOverlappingPairs, \n    validLength, \n    onlyLowerCaseChars\n} from './../../utils';\nimport ErrorPopup from './../ErrorPopup';\n\nconst LoginModal = (props) => {\n    const { isLoggedIn, email, password, loginErrorMessage} = useSelector(state => state.app)\n\n    const dispatch = useDispatch();\n    if(isLoggedIn) {\n        return(<></>);\n    }\n\n    const isFormValid = isValidEmail(email) &&\n        ruleIncreasingStraight(password) &&\n        ruleShouldNotContainLetters(password) &&\n        ruleContainNonOverlappingPairs(password) &&\n        validLength(password) &&\n        onlyLowerCaseChars(password);\n\n    return (<>\n        {!!loginErrorMessage && <ErrorPopup message={loginErrorMessage}/>}\n        <Modal/>\n        <LoginForm>\n            <Title>Login</Title>\n            <EmailInput \n                email={email}\n                onChange={(e) => dispatch(updateEmail(e.target.value))}\n            />\n            <PasswordInput \n                password={password}\n                onChange={(e) => dispatch(updatePassword(e.target.value))}\n            />\n            <SubmitButton \n                onClick={() => loginThunk()(dispatch)} \n                disabled={!isFormValid}\n            >Sign In</SubmitButton>\n        </LoginForm>\n    </>);\n}\n\nexport default LoginModal;\n\nconst Modal = styled.div`\n    position: fixed;\n    background-color: #aaa;\n    opacity: 0.8;\n    width: 100%;\n    height: 100%;\n`;\n\nconst LoginForm = styled.div`\n    position: fixed;\n    width: 400px;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background:white;\n    border-radius:6px;\n    padding:20px;\n    border: #2980b9 4px solid;\n`;\n\nconst Title =  styled.div`\n    font-size:1.5em;\n    color:#525252;\n`;\n\nconst SubmitButton = styled.button`\n    background:#2ecc71;\n    width:125px;\n    padding-top:5px;\n    padding-bottom:5px;\n    color:white;\n    border-radius:4px;\n    border: #27ae60 1px solid;\n\n    margin-top:20px;\n    margin-bottom:20px;\n    float:left;\n    margin-left:16px;\n    font-weight:800;\n    font-size:0.8em;\n\n    &:hover {\n        background:#2CC06B;\n    }\n\n    &:disabled {\n        opacity: 0.5;\n    }\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from './../../store/actions';\n\nconst Home = (props) => {\n    const dispatch = useDispatch();\n    const { isLoggedIn, email } = useSelector((state) => ({\n        isLoggedIn: state.app.isLoggedIn,\n        email: state.app.email\n    }))\n    return (<HomeContainer>\n        {isLoggedIn && \n            <>\n                <Header>Hello, {email}</Header>\n                <LogoutButton\n                    onClick={() => dispatch(logout())}\n                >Logout</LogoutButton>\n            </>\n        }\n\n        {!isLoggedIn && \n            <>\n            </>\n        }\n    </HomeContainer>)\n}\n\nconst HomeContainer = styled.div`\n    height: 100%;\n    padding: 40px;\n`;\n\nconst LogoutButton = styled.button`\n    background:#2ecc71;\n    width:125px;\n    padding-top:5px;\n    padding-bottom:5px;\n    color:white;\n    border-radius:4px;\n    border: #27ae60 1px solid;\n\n    margin-top:20px;\n    margin-bottom:20px;\n    float:left;\n    font-weight:800;\n    font-size:0.8em;\n\n    &hover {\n        background:#2CC06B;\n    }\n`;\n\nconst Header =  styled.div`\n    font-size:1.5em;\n    color:#525252;\n`;\n\n\nexport default Home;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\nimport LoginModal from './components/LoginModal';\nimport Home from './pages/Home/Home';\n\nconst store = configureStore();\n\nfunction App() {\n  return (\n    <div className=\"modal-open\">\n      <Provider store={store}>\n        <LoginModal/>\n        <Home/>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}